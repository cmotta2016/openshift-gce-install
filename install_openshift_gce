1. Criar projeto e habilitar faturamento

2. Registrar DNS público

3. Criar conta de serviço
Role: Projeto > Editor
O arquivo .json gerado será usado para ativar a conta e permitir a criação do ambiente

4. Gerar chave ssh e adicionar nas chaves e metadatas
$ ssh-keygen -t rsa -N '' -f ~/.ssh/gcp_key
$ cat ~/.ssh/gcp_key.pub
$ ssh-rsa AAAAB3NzaC1y...[OUTPUT OMITTED]...vzwgvAtkYXAbnP myuser
"Compute Engine" → "Metadata" → "SSH Keys" → "+ Add item"
"Compute Engine" → "Metadata" → "Metadata"
Key = sshKeys 
Value = myuser:ssh-rsa AAAAB3NzaC1y...[OUTPUT OMITTED]...vzwgvAtkYXAbnP myuser

5. Ativar a conta de serviço
$ gcloud init
$ gcloud auth activate-service-account --key-file=~/Downloads/osecluster.json --> arquivo gerado no passo 3

6. Cria arquivo de variáveis e define projeto, região e zona padrão
$ source ~/myvars
$ gcloud config set project ${PROJECTID}
$ gcloud config set compute/region ${REGION}
$ gcloud config set compute/zone ${DEFAULTZONE}

7. Criar Imagem Base
7.1. Cria instância temporária
$ chmod +x 01create_temp_instance.sh && ./01create_temp_instance.sh

7.2. Configurar a instância e gera imagem base
$ gcloud compute ssh ${CLUSTERID}-temp
$ sudo tee /etc/yum.repos.d/google-cloud.repo << EOF
[google-cloud-compute]
name=Google Cloud Compute
baseurl=https://packages.cloud.google.com/yum/repos/google-cloud-compute-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
       https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

$ sudo tee /etc/yum.repos.d/ose.repo << EOF
[rhel-7-server-rpms]
name=rhel-7-server-rpms
baseurl=http://oserpm01/repos/rhel-7-server-rpms
enabled=1
gpgcheck=0
[rhel-7-server-extras-rpms]
name=rhel-7-server-extras-rpms
baseurl=http://oserpm01/repos/rhel-7-server-extras-rpms
enabled=1
gpgcheck=0
[rhel-7-server-ansible-2.6-rpms]
name=rhel-7-server-ansible-2.6-rpms
baseurl=http://oserpm01/repos/rhel-7-server-ansible-2.6-rpms
enabled=1
gpgcheck=0
[rhel-7-server-ose-3.11-rpms]
name=rhel-7-server-ose-3.11-rpms
baseurl=http://oserpm01/repos/rhel-7-server-ose-3.11-rpms
enabled=1
gpgcheck=0
EOF

$ sudo tee /etc/sysconfig/network-scripts/ifcfg-eth0 << EOF
DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
MTU=1460
EOF
$ exit

$ chmod +x 02prepare_temp_instance.sh && ./02prepare_temp_instance.sh
$ chmod +x 03create_final_image.sh && ./03create_final_image.sh

8. Cria ambiente de redes (VPC, subnet, Public IPs and DNS records)
$ chmod +x 04create_network_environments.sh && ./04create_network_environments.sh

9. Cria Instâncias
$ chmod +x 05create_instances.sh && ./05create_instances.sh

10. Cria Storage Bucket para o registro
$ chmod +x 06create_storage_registry.sh && ./06create_storage_registry.sh

11. Remove script de inicialização
$ chmod +x 07remove_startup_script.sh && ./07remove_startup_script.sh

12. Configura ansible.cfg no Bastion
$ gcloud compute ssh ${CLUSTERID}-bastion
$ sudo mv /etc/ansible/ansbile.cfg /etc/ansible/ansible.cfg_bkp
$ sudo tee /etc/ansible/ansible.cfg << EOF
[defaults]
forks = 20
host_key_checking = False
remote_user = myuser
roles_path = roles/
gathering = smart
fact_caching = jsonfile
fact_caching_connection = $HOME/ansible/facts
fact_caching_timeout = 600
log_path = $HOME/ansible.log
nocows = 1
callback_whitelist = profile_tasks

[ssh_connection]
ssh_args = -o ControlMaster=auto -o ControlPersist=600s -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=false -o ForwardAgent=yes
control_path = %(directory)s/%%h-%%r
pipelining = True
timeout = 10

[persistent_connection]
connect_timeout = 30
connect_retries = 30
connect_interval = 1
EOF

13. Instala ansible no bastion
$ sudo yum install openshift-ansible -y

14. Cria inventory

15. Logado no bastion, atualiza pacotes nos hosts
$ ansible all -i inventory -b -m yum -a "name=* state=latest"

15.1. Instala Openshift
$ ansible-playbook -i inventory /usr/share/ansible/openshift-ansible/playbooks/prerequisites.yml
$ ansible-playbook -i inventory /usr/share/ansible/openshift-ansible/playbooks/deploy_cluster.yml

15.2. Instala inventory, metrics e logging
$ ansible-playbook -i inventory /usr/share/ansible/openshift-ansible/playbooks/openshift-monitoring/config.yml
$ ansible-playbook -i inventory /usr/share/ansible/openshift-ansible/playbooks/openshift-metrics/config.yml
$ ansible-playbook -i inventory /usr/share/ansible/openshift-ansible/playbooks/openshift-logging/config.yml

